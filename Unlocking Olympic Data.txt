Unlocking Olympic Data: SQL Insights into Decades of Games

This project focuses on analyzing the 120 years of Olympics history dataset using SQL queries. The dataset consists of two tables: "dataset_olympics.csv" and "noc_region.csv". The "dataset_olympics" table contains information about athletes, their teams, the Olympic Games they participated in, and the medals they won. The "noc_region" table provides the mapping between the National Olympic Committee codes (NOC) and the corresponding regions. By cleaning the dataset using Python and Pandas, the project aims to ensure data quality.  To extract insights based on the questions given, SQL queries will be written in module 2.

Olympics_history.py python cleaning::::::

import pandas as pd
import warnings
warnings.filterwarnings("ignore")


#Task1
#Loading the data
def read_data_from_csv():
    df= pd.read_csv("dataset_olympics.csv")
    return df


#Task 2: Renaming the Columns
def data_cleaning():
    # Read data from a CSV file
    data = read_data_from_csv()

    # Create a copy of the data
    df= data.copy()

    # Dropping columns 'Height' and 'Weight'
    df.drop(columns=['Height', 'Weight'], axis= 1, inplace=True)
    

    # Drop duplicate rows
    df.drop_duplicates(inplace= True )
    # Replace missing values in the 'Medal' column with 'Medal-less'
    
    df["Medal"].fillna('Medal-less', inplace= True)
    # Replace missing values in the 'Age' column with the median age('24') from the dataset
    
    df["Age"].fillna(df['Age'].median(), inplace = True)
    # Save the cleaned dataset to a new CSV file named 'olympics_history_cleaned.csv'
    df.to_csv('olympics_history_cleaned.csv', index=False)

    # Return the cleaned dataset
    return df

#Do not Delete the Following function
def task_runner():
    data_cleaning()

NOC_regions python cleaning::::

import pandas as pd
import warnings
warnings.filterwarnings("ignore")


#Task1
#Loading the data
def read_data_from_csv():
    df = pd.read_csv('noc_region.csv')
    return df


#Task 2: Renaming the Columns
def data_cleaning():
    # Read data from a CSV file
    data = read_data_from_csv()

    # Create a copy of the data
    df = data.copy()

    # Define columns to remove
    df.drop(columns=['notes'], axis= 1, inplace=True)

    # Drop the specified columns from the dataframe
    

    # Define new column names for renaming('noc_region': 'NOC' and 'reg': 'region')
    df.rename(columns= {"noc_region": "NOC", "reg":"region"}, inplace= True)
    # Rename columns using the new column names

    # Save the cleaned dataset to a new CSV file named 'olympics_history_noc_regions_cleaned.csv'
    df.to_csv('olympics_history_noc_regions_cleaned.csv', index=False)

    # Return the cleaned dataset
    return df


#Do not Delete the Following function
def task_runner():
    data_cleaning()

SQL Queries:::::::
1) How many olympics games have been held?
---select count(distinct Games) as total_olympic_games from olympics_history;

2)List down all Olympics games held so far. Order the result by year.
---select distinct year, season, city from olympics_history 
order by year;

3)Mention the total number of nations who participated in each olympics game?. Order the results by games.
 
(Hint: You can group the data by games and region, and then count the number of unique regions in each game to determine the total number of nations participating. Finally, sort the results by games.)
---select o.Games, count(distinct oh.region) as total_nations
from olympics_history o
join olympics_history_noc_regions oh
on o.NOC = oh.NOC
group by Games
order by Games;

4)Which nation has participated in all of the olympic games? and order the output by first column which is fetched
 
(Hint: To find the nation that has participated in all Olympic games, you can calculate the total number of distinct games in the dataset and count the number of games each country has participated in. Then, join these two subqueries based on the total number of games. Finally, sort the output by the first column fetched.)
---SELECT olympics_history_noc_regions.region, COUNT(DISTINCT olympics_history.games) AS total_games_participated
	FROM olympics_history
	JOIN olympics_history_noc_regions ON olympics_history.noc = olympics_history_noc_regions.noc
	GROUP BY olympics_history_noc_regions.region
	HAVING total_games_participated = (SELECT COUNT(DISTINCT games) FROM olympics_history)
	ORDER BY olympics_history_noc_regions.region;

5)How many unique athletes have won a gold medal in the Olympics?
---select count(distinct name) as athletes_won_gold from olympics_history
where Medal = 'Gold';

6)Which Sports were just played only once in the olympics? and Order the output by Sports. output should include number of games.
 
(Hint: To find the sports that were played only once in the Olympics, you can start by selecting distinct combinations of games and sports. Then, in a separate subquery, count the number of games each sport was played. Join these two subqueries based on the sport column and filter for sports with a count of 1. Finally, sort the output by the sport column.)
---select distinct sport,count(distinct games) as no_of_games,games from olympics_history group by sport
having no_of_games=1 order by sport;  

7)Fetch the total number of sports played in each olympic games. Order by no of sports by descending.
 
(Hint: To determine the total number of sports played in each Olympic game, you can start by selecting distinct combinations of games and sports. Then, in a separate subquery, count the number of sports for each game. Finally, sort the output by the number of sports in descending order.)
---select distinct games, count(distinct sport) as no_of_sport from olympics_history group by games order by sport asc;

8)Fetch oldest athlete to win a gold medal
---select name, age, sex, team, games, city,  sport, event, medal, rnk
FROM (select name, age, sex, team, games, city,  sport, event, medal, RANK() over
      (order by age desc) as rnk
      from olympics_history
      where medal = 'Gold') as oldest_athlete
      group by medal;

9)Top 5 athletes who have won the most gold medals. Order the results by gold medals in descending.
 
(Hint: Create a temporary table counting the total number of gold medals for each athlete. Rank the athletes using dense_rank(). Select the top 5 athletes based on their rank, ordering them by the total gold medals in descending order.)
---
select name, team, count(medal) as total_gold_medal from olympics_history
where medal = 'gold'
group by name, team
order by count(medal) desc
limit 5;

10)Top 5 athletes who have won the most medals (gold/silver/bronze). Order the results by medals in descending.
 
(Hint: Create a temporary table counting the total number of medals for each athlete. Rank the athletes using dense_rank(). Select the top 5 athletes based on their rank, ordering them by the total number of medals in descending order.)
---with t1 as
        (select name, team, count(medal) as total_medals from olympics_history 
        where medal in ('gold','silver', 'bronze')
        group by name, team
        order by total_medals desc),
    t2 as
        (select *, dense_rank() over (order by total_medals desc)as rnk from t1)
    select name, team, total_medals
    from t2
    limit 5;

11)Top 5 most successful countries in olympics. Success is defined by no of medals won.
 
(Hint: Create a temporary table counting the total number of medals for each country. Rank the countries using dense_rank(). Select the top 5 countries based on their rank, ordering them by the total number of medals in descending order.)
---WITH
    t1 AS(
    SELECT
        b.region 'region',
        COUNT(a.medal) 'total_medal'
    FROM
        olympics_history a,
        olympics_history_noc_regions b
    WHERE
        a.noc = b.noc
        and a.Medal in ('GOLD','silver','bronze')
    GROUP BY
        b.region
)
SELECT
        region,
        total_medal,
        dense_rank() over(
    ORDER BY
        total_medal
    DESC
    )as rnk
FROM
    t1
LIMIT 5

12)In which Sport/event, India has won highest medals.
 
(Hint: Create a temporary table counting the total number of medals for each sport/event where India has won. Rank the sport/events using rank(). Select the sport/event with the highest rank (1) from the temporary table.)
---WITH t1 AS (
    SELECT
        COUNT(medal) AS india_medal,
        sport
    FROM
        `olympics_history`
    WHERE
        team = 'india' AND medal != 'Medal-less'
    GROUP BY
        sport
),
    rank_medal as(
    SELECT sport,
        india_medal,
    
    RANK() OVER (ORDER BY india_medal DESC) AS r
FROM
    t1)
   
select sport,india_medal from rank_medal where r=1

13)Break down all olympic games where india won medal for Hockey and how many medals in each olympic games and order the result by no of medals in descending.
---select team, sport, games, count(medal) as total_medals
from olympics_history
where sport= 'hockey' and team = 'india' and medal!= 'medal-less'
group by games
order by total_medals desc;
